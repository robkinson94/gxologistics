name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Set up Python
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      # Step 3: Install dependencies
      - name: Install dependencies
        env:
          PYTHONPATH: ${{ github.workspace }}/gxologistics
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          DEBUG: ${{ secrets.DEBUG }}
          ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
          CORS_ALLOWED_ORIGINS: ${{ secrets.CORS_ALLOWED_ORIGINS }}
          ACCESS_TOKEN_LIFETIME_MINUTES: ${{ secrets.ACCESS_TOKEN_LIFETIME_MINUTES }}
          REFRESH_TOKEN_LIFETIME_DAYS: ${{ secrets.REFRESH_TOKEN_LIFETIME_DAYS }}
          ROTATE_REFRESH_TOKENS: ${{ secrets.ROTATE_REFRESH_TOKENS }}
          BLACKLIST_AFTER_ROTATION: ${{ secrets.BLACKLIST_AFTER_ROTATION }}
          UPDATE_LAST_LOGIN: ${{ secrets.UPDATE_LAST_LOGIN }}
          REACT_DOMAIN: ${{ secrets.REACT_DOMAIN }}
          REACT_VERIFY_PATH: ${{ secrets.REACT_VERIFY_PATH }}
          REACT_REDIRECT_PATH: ${{ secrets.REACT_REDIRECT_PATH }}
          DEFAULT_FROM_EMAIL: ${{ secrets.DEFAULT_FROM_EMAIL }}
          EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
          EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
          EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
          EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
        working-directory: gxologistics
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      # Step 4: Run tests
      - name: Run tests
        env:
          PYTHONPATH: ${{ github.workspace }}
          SECRET_KEY: ${{ secrets.SECRET_KEY }}
          DEBUG: ${{ secrets.DEBUG }}
          ALLOWED_HOSTS: ${{ secrets.ALLOWED_HOSTS }}
          CORS_ALLOWED_ORIGINS: ${{ secrets.CORS_ALLOWED_ORIGINS }}
          ACCESS_TOKEN_LIFETIME_MINUTES: ${{ secrets.ACCESS_TOKEN_LIFETIME_MINUTES }}
          REFRESH_TOKEN_LIFETIME_DAYS: ${{ secrets.REFRESH_TOKEN_LIFETIME_DAYS }}
          ROTATE_REFRESH_TOKENS: ${{ secrets.ROTATE_REFRESH_TOKENS }}
          BLACKLIST_AFTER_ROTATION: ${{ secrets.BLACKLIST_AFTER_ROTATION }}
          UPDATE_LAST_LOGIN: ${{ secrets.UPDATE_LAST_LOGIN }}
          REACT_DOMAIN: ${{ secrets.REACT_DOMAIN }}
          REACT_VERIFY_PATH: ${{ secrets.REACT_VERIFY_PATH }}
          REACT_REDIRECT_PATH: ${{ secrets.REACT_REDIRECT_PATH }}
          DEFAULT_FROM_EMAIL: ${{ secrets.DEFAULT_FROM_EMAIL }}
          EMAIL_HOST: ${{ secrets.EMAIL_HOST }}
          EMAIL_PORT: ${{ secrets.EMAIL_PORT }}
          EMAIL_HOST_USER: ${{ secrets.EMAIL_HOST_USER }}
          EMAIL_HOST_PASSWORD: ${{ secrets.EMAIL_HOST_PASSWORD }}
        working-directory: gxologistics
        run: python manage.py test

  docker:
    runs-on: ubuntu-latest
    needs: test  # Run this job after tests pass

    steps:
      # Step 1: Checkout code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Log in to DockerHub
      - name: Log in to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      # Step 3: Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: gxologistics
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/gxologistics:latest
